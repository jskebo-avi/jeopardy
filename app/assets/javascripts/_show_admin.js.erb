$(function() {
  	$('.btn_correct').click(function() {
	    var clue = $(this).attr("data-clue");
	    var answer = $(this).attr("data-answer");
	    var evalSuccessHandler = function(evalResponse) {
	      	// because of how javascript 'this' scoping works (which you should totally research)
	      	// the $(this).whatever will not refer to the clicked element anymore.
	      	// so jquery offers a proxy function that defines a function with the 'this' scoped to the argument you give it.
	      	// This is one of the sucky things about javascript.  :(  Sorry!
	      	// see below where we're using $.proxy to wrap this function.
	      	$(this).closest('tr').css("background-color", "chartreuse");
	      	$(this).parent().siblings('.final_score').text(evalResponse.new_user_score);
	      	var user = $(this).parent().siblings().closest(".answer-user").text();

	      	var scoreSuccessHandler = function(scoreResponse){
	      		$(this).siblings('.final_score').text(scoreResponse.user_score)
	      	}

	      	$(".answer-user").each(function(){
	      		if($(this).text() === user){
	      			$.ajax({
				      	url: "/answers/get_user_score",
				      	data: JSON.stringify({ answer: answer, user: user }),
				      	dataType: 'json',
				      	contentType: 'application/json',
				      	type: 'POST',
				    }).done($.proxy(scoreSuccessHandler, this))
				    .fail(function() {
				      	// consider what to do in case of errors
				      	// http://api.jquery.com/jquery.ajax/
				      	debugger;
				    });
	      		}
	      	})
	    };

	    $.ajax({
	      	url: "/answers/evaluate",
	      	data: JSON.stringify({ clue: clue, answer: answer, status: 1 }),
	      	dataType: 'json',
	      	contentType: 'application/json',
	      	type: 'POST',
	    }).done($.proxy(evalSuccessHandler, this))
	    .fail(function() {
	      	// consider what to do in case of errors
	      	// http://api.jquery.com/jquery.ajax/
	      	debugger;
	    });

	    // you could probably think of something better here to indicate "loading"
	    // because the above ajax call is anycronous, this line will execute before the success and error handlers do
	    $(this).closest('tr').css("background-color", "yellow");
  	});
	$('.btn_incorrect').click(function() {
	    var clue = $(this).attr("data-clue");
	    var answer = $(this).attr("data-answer");
	    var evalSuccessHandler = function(evalResponse) {
	      	$(this).closest('tr').css("background-color", "tomato");
	      	$(this).parent().siblings().closest('.final_score').text(evalResponse.new_user_score);
	      	var user = $(this).parent().siblings().closest(".answer-user").text();

	      	var scoreSuccessHandler = function(scoreResponse){
	      		$(this).siblings('.final_score').text(scoreResponse.user_score)
	      	}

	      	$(".answer-user").each(function(){
	      		if($(this).text() === user){
	      			$.ajax({
				      	url: "/answers/get_user_score",
				      	data: JSON.stringify({ answer: answer, user: user }),
				      	dataType: 'json',
				      	contentType: 'application/json',
				      	type: 'POST',
				    }).done($.proxy(scoreSuccessHandler, this))
				    .fail(function() {
				      	// consider what to do in case of errors
				      	// http://api.jquery.com/jquery.ajax/
				      	debugger;
				    });
	      		}
	      	})
	    };

	    $.ajax({
	      	url: "/answers/evaluate",
	      	data: JSON.stringify({ clue: clue, answer: answer, status: -1 }),
	      	dataType: 'json',
	      	contentType: 'application/json',
	      	type: 'POST',
	    }).done($.proxy(evalSuccessHandler, this))
	    .fail(function() {
	      	debugger;
	    });

	    $(this).closest('tr').css("background-color", "yellow");
  	});
});